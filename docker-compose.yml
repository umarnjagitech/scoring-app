# docker-compose.yml
# This file defines your multi-container Docker application.
version: '2'

services:
  web:
    # Build the image using the Dockerfile in the ./web directory
    build: ./web
    container_name: scoring_web
    # Map host port (from .env) to container port 80 (Apache)
    ports:
      - "${APACHE_PORT}:80"
    # Mount local directories into the container for development
    # Any changes in ./web/html on your host will instantly reflect in the container
    volumes:
      - ./web/html:/var/www/html/ # Mount application code
      - ./web/000-default.conf:/etc/apache2/sites-available/000-default.conf # Mount Apache config
    # Ensure the database service starts before the web service
    depends_on:
      - db
    # Pass environment variables to the PHP application for database connection
    environment:
      DB_HOST: db # This matches the 'db' service name
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}

  db:
    # Use the official MySQL 8.0 Docker image
    image: mysql:8.0
    container_name: scoring_db
    # Set MySQL environment variables using values from .env
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
    # Mount a named volume for persistent database data
    volumes:
      - db_data:/var/lib/mysql # This persists your database data
      # Mount the init.sql script to initialize the database on first run
      - ./mysql/init.sql:/docker-entrypoint-initdb.d/init.sql
    # Optional: Map host port 3306 to container port 3306 if you need to access MySQL directly from your host
    ports:
      - "3307:3306"

# Define named volumes for data persistence
volumes:
  db_data: